defmodule AshShop.Shop.Product do
  # Using Ash.Resource turns this module into an Ash resource.
  use Ash.Resource,
  # Tells Ash where the generated code interface belongs
  domain: AshShop.Shop,
  # Tells Ash you want this resource to store its data in Postgres.
  data_layer: AshPostgres.DataLayer

  # The Postgres keyword is specific to the AshPostgres module.
  postgres do
    # Tells Postgres what to call the table
    table "products"
    # Tells Ash how to interface with the Postgres table
    repo AshShop.Repo
  end

  actions do
    # Exposes default built in actions to manage the resource
    defaults [:read, :destroy]

    create :create do
      # Accept both description and name as input
      accept [:description, :name]
    end

    update :update do
      # accept description as input
      accept [:description]
    end

    # Defines custom read action which fetches product by id.
    read :by_id do
      # This action has one argument :id of type :uuid
      argument :id, :uuid, allow_nil?: false
      # Tells us we expect this action to return a single result
      get? true
      # Filters the `:id` given in the argument
      # against the `id` of each element in the resource
      filter expr(id == ^arg(:id))
    end
  end

  # Attributes are simple pieces of data that exist in your resource
  attributes do
    # Add an autogenerated UUID primary key called `:id`.
    uuid_primary_key :id
    # Add a string type attribute called `:name`
    attribute :name, :string do
      # We don't want the name to ever be `nil`
      allow_nil? false
    end

    # Add a string type attribute called `:description`
    # If allow_nil? is not specified, then description can be nil
    attribute :description, :string
  end
end
